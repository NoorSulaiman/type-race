{"version":3,"sources":["../../src/models/User.js"],"names":["dotenv","config","schema","mongoose","Schema","username","type","String","required","email","lowercase","unique","passwordHash","confirmed","Boolean","default","confirmationToken","resetPasswordToken","points","Number","timestamps","methods","isValidPassword","password","bcrypt","compare","setPassword","hashSync","setConfirmationToken","generateJWT","setResetPasswordToken","generateResetPasswordToken","generateConfirmationUrl","process","env","HOST","generateResetPasswordLink","jwt","sign","JWT_SECRET","expiresIn","toAuthJSON","token","plugin","uniqueValidator","message","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;;AAEAA,iBAAOC,MAAP;AACA,IAAMC,SAAS,IAAIC,mBAASC,MAAb,CAAoB;AAC/BC,cAAU,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADqB;AAE/BC,WAAO,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCE,WAAW,IAA3C,EAAiDC,QAAQ,IAAzD,EAFwB;AAG/BC,kBAAc,EAAEN,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAHiB;AAI/BK,eAAW,EAAEP,MAAMQ,OAAR,EAAiBC,SAAS,KAA1B,EAJoB;AAK/BC,uBAAmB,EAAEV,MAAMC,MAAR,EAAgBQ,SAAS,EAAzB,EALY;AAM/BE,wBAAoB,EAAEX,MAAMC,MAAR,EAAgBQ,SAAS,EAAzB,EANW;AAO/BG,YAAQ,EAAEZ,MAAMa,MAAR,EAAgBJ,SAAS,CAAzB;AAPuB,CAApB,EASX,EAAEK,YAAY,IAAd,EATW,CAAf;;AAYAlB,OAAOmB,OAAP,CAAeC,eAAf,GAAiC,SAASA,eAAT,CAAyBC,QAAzB,EAAmC;AAChE,WAAOC,iBAAOC,OAAP,CAAeF,QAAf,EAAyB,KAAKX,YAA9B,CAAP;AACH,CAFD;;AAIAV,OAAOmB,OAAP,CAAeK,WAAf,GAA6B,SAASA,WAAT,CAAqBH,QAArB,EAA+B;AACxD,SAAKX,YAAL,GAAoBY,iBAAOG,QAAP,CAAgBJ,QAAhB,EAA0B,EAA1B,CAApB;AACH,CAFD;;AAIArB,OAAOmB,OAAP,CAAeO,oBAAf,GAAsC,SAASA,oBAAT,GAAgC;AAClE,SAAKZ,iBAAL,GAAyB,KAAKa,WAAL,EAAzB;AACH,CAFD;AAGA3B,OAAOmB,OAAP,CAAeS,qBAAf,GAAuC,SAASA,qBAAT,GAAiC;AACpE,SAAKb,kBAAL,GAA0B,KAAKc,0BAAL,EAA1B;AACH,CAFD;;AAIA7B,OAAOmB,OAAP,CAAeW,uBAAf,GAAyC,SAASA,uBAAT,GAAmC;AACxE,WAAUC,QAAQC,GAAR,CAAYC,IAAtB,sBAA2C,KAAKnB,iBAAhD;AACH,CAFD;;AAIAd,OAAOmB,OAAP,CAAee,yBAAf,GAA2C,SAASA,yBAAT,GAAqC;AAC5E,WAAUH,QAAQC,GAAR,CAAYC,IAAtB,wBAA6C,KAAKlB,kBAAlD;AACH,CAFD;;AAIAf,OAAOmB,OAAP,CAAeQ,WAAf,GAA6B,SAASA,WAAT,GAAuB;AAChD,WAAOQ,uBAAIC,IAAJ,CACH;AACIjC,kBAAU,KAAKA,QADnB;AAEII,eAAO,KAAKA,KAFhB;AAGII,mBAAW,KAAKA;AAHpB,KADG,EAMHoB,QAAQC,GAAR,CAAYK,UANT,CAAP;AAQH,CATD;;AAWArC,OAAOmB,OAAP,CAAeU,0BAAf,GAA4C,SAASA,0BAAT,GAAsC;AAC9E,WAAOM,uBAAIC,IAAJ,CACH;AACI7B,eAAO,KAAKA;AADhB,KADG,EAIHwB,QAAQC,GAAR,CAAYK,UAJT,EAKH,EAAEC,WAAW,IAAb,EALG,CAAP;AAOH,CARD;;AAWAtC,OAAOmB,OAAP,CAAeoB,UAAf,GAA4B,SAASA,UAAT,GAAsB;AAC9C,WAAO;AACHpC,kBAAU,KAAKA,QADZ;AAEHI,eAAO,KAAKA,KAFT;AAGHI,mBAAW,KAAKA,SAHb;AAIH6B,eAAO,KAAKb,WAAL;;AAJJ,KAAP;AAOH,CARD;;AAUA3B,OAAOyC,MAAP,CAAcC,iCAAd,EAA+B,EAAEC,SAAS,6BAAX,EAA/B;;kBAEe1C,mBAAS2C,KAAT,CAAe,MAAf,EAAuB5C,MAAvB,C","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport uniqueValidator from 'mongoose-unique-validator';\n// add uniqness and email validations \n\ndotenv.config()\nconst schema = new mongoose.Schema({\n    username: { type: String, required: true },\n    email: { type: String, required: true, lowercase: true, unique: true },\n    passwordHash: { type: String, required: true },\n    confirmed: { type: Boolean, default: false },\n    confirmationToken: { type: String, default: \"\" },\n    resetPasswordToken: { type: String, default: \"\" },\n    points: { type: Number, default: 0 }\n},\n    { timestamps: true }\n);\n\nschema.methods.isValidPassword = function isValidPassword(password) {\n    return bcrypt.compare(password, this.passwordHash);\n};\n\nschema.methods.setPassword = function setPassword(password) {\n    this.passwordHash = bcrypt.hashSync(password, 10)\n};\n\nschema.methods.setConfirmationToken = function setConfirmationToken() {\n    this.confirmationToken = this.generateJWT();\n};\nschema.methods.setResetPasswordToken = function setResetPasswordToken() {\n    this.resetPasswordToken = this.generateResetPasswordToken();\n};\n\nschema.methods.generateConfirmationUrl = function generateConfirmationUrl() {\n    return `${process.env.HOST}/confirmation/${this.confirmationToken}`;\n};\n\nschema.methods.generateResetPasswordLink = function generateResetPasswordLink() {\n    return `${process.env.HOST}/reset_password/${this.resetPasswordToken}`\n};\n\nschema.methods.generateJWT = function generateJWT() {\n    return jwt.sign(\n        {\n            username: this.username,\n            email: this.email,\n            confirmed: this.confirmed\n        },\n        process.env.JWT_SECRET\n    )\n};\n\nschema.methods.generateResetPasswordToken = function generateResetPasswordToken() {\n    return jwt.sign(\n        {\n            email: this.email\n        },\n        process.env.JWT_SECRET,\n        { expiresIn: \"1h\" }\n    )\n};\n\n\nschema.methods.toAuthJSON = function toAuthJSON() {\n    return {\n        username: this.username,\n        email: this.email,\n        confirmed: this.confirmed,\n        token: this.generateJWT()\n\n    }\n}\n\nschema.plugin(uniqueValidator, { message: \"This email is already taken\" })\n\nexport default mongoose.model('User', schema);"]}