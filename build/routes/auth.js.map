{"version":3,"sources":["../../src/routes/auth.js"],"names":["router","express","Router","post","req","res","credentials","body","User","findOne","email","then","user","isValidPassword","password","json","toAuthJSON","status","errors","global","token","findOneAndUpdate","confirmationToken","confirmed","new","setResetPasswordToken","save","catch","err","jwt","verify","process","env","JWT_SECRET","data","resetPasswordToken","setPassword"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express';\nimport User from '../models/User';\nimport parseErrors from \"../utils/parseErrors\";\nimport { sendResetPasswordEmail, sendPasswordChangedEmail } from '../mailer';\nimport jwt from 'jsonwebtoken';\n\nconst router = express.Router();\n\nrouter.post(\"/\", (req, res) => {\n    const { credentials } = req.body;\n    User.findOne({ email: credentials.email }).then(user => {\n        if (user && user.isValidPassword(credentials.password)) {\n            res.json({ user: user.toAuthJSON() });\n        } else {\n            res.status(400).json({ errors: { global: \"invalid credentials\" } });\n        }\n    });\n});\n\nrouter.post(\"/confirmation\", (req, res) => {\n    const token = req.body.token;\n    User.findOneAndUpdate(\n        { confirmationToken: token },\n        { confirmationToken: \"\", confirmed: true },\n        { new: true })\n        .then(user =>\n            user ? res.json({ user: user.toAuthJSON() }) : res.status(400).json({})\n        );\n});\n\nrouter.post(\"/reset_password_request\", (req, res) => {\n    const { email } = req.body;\n    User.findOne({ email }).then(user => {\n        if (user) {\n            user.setResetPasswordToken()\n            user.save().then(user => {\n                sendResetPasswordEmail(user);\n                res.json({});\n            }).catch(err => res.status(400).json({ errors: parseErrors(err.errors) }));\n        } else {\n            res.status(400).json({ errors: { global: \"Sorry somthing went wrong!\" } })\n        }\n    });\n\n});\n\nrouter.post(\"/validate_token\", (req, res) => {\n    jwt.verify(req.body.token, process.env.JWT_SECRET, err => {\n        if (err) {\n            res.status(401).json({})\n        } else { res.json({}) };\n    });\n\n});\n\nrouter.post(\"/update_password\", (req, res) => {\n    const { password, token } = req.body.data;\n    jwt.verify(token, process.env.JWT_SECRET, (err) => {\n        if (err) {\n            res.status(401).json({ errors: { global: \"Invalid token\" } })\n        } else {\n            User.findOneAndUpdate(\n                { resetPasswordToken: token },\n                { resetPasswordToken: \"\" },\n                { new: true })\n                .then(user => {\n                    if (user) {\n                        user.setPassword(password)\n                        user.save().then(user => {\n                            sendPasswordChangedEmail(user, password)\n                            res.json({})\n                        })\n                    } else { res.status(404).json({ errors: { global: \"Invalid token\" } }) }\n                });\n        }\n    });\n});\n\nexport default router;"]}