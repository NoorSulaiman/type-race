{"version":3,"sources":["../../src/routes/users.js"],"names":["router","express","Router","post","req","res","body","user","email","password","username","User","setPassword","setConfirmationToken","save","then","userRecord","json","toAuthJSON","catch","status","errors","err","findOne","data","findOneAndUpdate","$inc","points","new","get","find","usersArray","users","map","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEAF,OAAOG,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,yBACWD,IAAIE,IAAJ,CAASC,IADpB;AAAA,QACnBC,KADmB,kBACnBA,KADmB;AAAA,QACZC,QADY,kBACZA,QADY;AAAA,QACFC,QADE,kBACFA,QADE;;AAE3B,QAAMH,OAAO,IAAII,cAAJ,CAAS,EAAED,kBAAF,EAAYF,YAAZ,EAAT,CAAb;AACAD,SAAKK,WAAL,CAAiBH,QAAjB;AACAF,SAAKM,oBAAL;AACAN,SAAKO,IAAL,GAAYC,IAAZ,CAAiB,sBAAc;AAC3B,2CAAsBC,UAAtB;AACAX,YAAIY,IAAJ,CAAS,EAAEV,MAAMS,WAAWE,UAAX,EAAR,EAAT;AACH,KAHD,EAGGC,KAHH,CAGS;AAAA,eAAOd,IAAIe,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEI,QAAQ,2BAAYC,IAAID,MAAhB,CAAV,EAArB,CAAP;AAAA,KAHT;AAIH,CATD;;AAWArB,OAAOG,IAAP,CAAY,YAAZ,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,QAC5BG,KAD4B,GAClBJ,IAAIE,IADc,CAC5BE,KAD4B;;AAEpCG,mBAAKY,OAAL,CAAa,EAAEf,YAAF,EAAb,EAAwBO,IAAxB,CAA6B,gBAAQ;AACjC,2CAAsBR,IAAtB;AACH,KAFD,EAEGY,KAFH,CAES;AAAA,eAAOd,IAAIe,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEI,QAAQ,2BAAYC,IAAID,MAAhB,CAAV,EAArB,CAAP;AAAA,KAFT;AAGH,CALD;;AAOArB,OAAOG,IAAP,CAAY,SAAZ,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,QACzBmB,IADyB,GAChBpB,IAAIE,IADY,CACzBkB,IADyB;;AAEjCb,mBAAKc,gBAAL,CACI,EAAEjB,OAAOgB,KAAKhB,KAAd,EADJ,EAEI,EAAEkB,MAAM,EAAEC,QAAQH,KAAKG,MAAf,EAAR,EAFJ,EAGI,EAAEC,KAAK,IAAP,EAHJ,EAIET,KAJF,CAIQ;AAAA,eAAOd,IAAIe,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEI,QAAQ,2BAAYC,IAAID,MAAhB,CAAV,EAArB,CAAP;AAAA,KAJR;AAKH,CAPD;AAQArB,OAAO6B,GAAP,CAAW,GAAX,EAAgB,UAACzB,GAAD,EAAMC,GAAN,EAAc;AAC1BM,mBAAKmB,IAAL,CAAU,EAAV,EAAcf,IAAd,CAAmB,iBAAS;AACxB,YAAIgB,aAAa,EAAjB;AACAC,cAAMC,GAAN,CAAU,gBAAQ;AACdF,uBAAWG,IAAX,CAAgB,EAAExB,UAAUH,KAAKG,QAAjB,EAA2BiB,QAAQpB,KAAKoB,MAAxC,EAAhB;AACH,SAFD;AAGAtB,YAAIY,IAAJ,CAAS,EAAEe,OAAOD,UAAT,EAAT;AACH,KAND,EAMGZ,KANH,CAMS;AAAA,eAAOd,IAAIe,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEI,QAAQ,2BAAYC,IAAID,MAAhB,CAAV,EAArB,CAAP;AAAA,KANT;AAOH,CARD;kBASerB,M","file":"users.js","sourcesContent":["import express from \"express\";\nimport User from \"../models/User\";\nimport parseErrors from \"../utils/parseErrors\";\nimport { sendConfirmationEmail } from \"../mailer\";\n\n\nconst router = express.Router();\n\nrouter.post(\"/\", (req, res) => {\n    const { email, password, username } = req.body.user;\n    const user = new User({ username, email });\n    user.setPassword(password);\n    user.setConfirmationToken();\n    user.save().then(userRecord => {\n        sendConfirmationEmail(userRecord);\n        res.json({ user: userRecord.toAuthJSON() });\n    }).catch(err => res.status(400).json({ errors: parseErrors(err.errors) }));\n});\n\nrouter.post(\"/reconfirm\", (req, res) => {\n    const { email } = req.body;\n    User.findOne({ email }).then(user => {\n        sendConfirmationEmail(user)\n    }).catch(err => res.status(400).json({ errors: parseErrors(err.errors) }));\n})\n\nrouter.post(\"/points\", (req, res) => {\n    const { data } = req.body;\n    User.findOneAndUpdate(\n        { email: data.email },\n        { $inc: { points: data.points } },\n        { new: true }\n    ).catch(err => res.status(400).json({ errors: parseErrors(err.errors) }));\n})\nrouter.get(\"/\", (req, res) => {\n    User.find({}).then(users => {\n        let usersArray = [];\n        users.map(user => {\n            usersArray.push({ username: user.username, points: user.points })\n        })\n        res.json({ users: usersArray })\n    }).catch(err => res.status(400).json({ errors: parseErrors(err.errors) }));\n})\nexport default router;"]}